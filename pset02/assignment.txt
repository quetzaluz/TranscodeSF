As this class goes on, some of the assignments may become more and more open-ended.

This is the first of the open-ended assignments.

OVERVIEW:

Your task: Use what you've learned about object-oriented programming to create a
small text adventure game. In the game, you are a character with an inventory of
items.  Each item has a name, that you can use to refer to it in commands.
You're also in a room, which may connect to other rooms.

Commands you should support:

> look
Tells you what your surroundings are.  Example:

> look

You are in a room.  It is damp here.
There is a key on the floor.
There is a lamp on the floor.
There is a door to the north.

> go <direction>
Moves the player character in the given cardinal direction, if possible, then
prints the new result of the 'look' command.  Example:

> go south
There is not a door to the south.
> go north
You enter the door to the north.
You are in a room.
It is bright here.
There is a bottle on the floor.
There is a door to the south.

> take <item>
Takes an item from the room and puts it in your inventory.  Example:

> take bottle
You now have a bottle.
> take key
There is no key in this room.

> drop <item>
Takes an item from your inventory and drops it in the current room.  Example:

> drop bottle
You drop the bottle on the floor.

> leave
Leaves the game.  Example:

> leave
Bye!
gobo:~ naomi$

STEP 1:

No coding yet!  Answer the following questions, in this file:

* What are the kinds of objects in this game universe?
* What kind of methods and fields might you put on those objects?
	Player: Contains a field track of inventory, taking items for inventory, dropping items, and using items. In more advanced games of this nature it might also include statistics such as health points or experience. I am planning on putting the "leave" method in this object as well. In addition to the specifications of the assignment, I am planning to have the game prompt the user to name their character or load an old character based off of their name. This will also involve a "save" function.
	Room: Contains a constructor for building new rooms. Information contained here will be a room name (that also prints exits), a room description, and room inventory. There will be a method that associates cardinal directions (n, e, s, w) with other rooms. I am not sure about this one, but you might also want to contain movement commands (IE go north) within this object.
	Item: This contains an item constructor that takes information such as a short description (how it will appear listed in your inventory), a long description (how it will appear when it's on the floor in a room), and a use/use on method that will work only with specific arguments--otherwise it will return or print a statement of "Nothing happens when you use %" % example.item. I am expecting that setting use behaviors will require another constructor so that specific objects will be capable of specific usage behaviors. In the case of lanterns and more complicated objects such as weapons (if I even bother to implement something like that) there may also be an "unequip" function.
	NPC: This is something I'll implement only if I have time, but I would like to program a class that constructs non-player characters that you can't take but you'd be able to interact with them in other ways (via "talk" or "hit" commands). I've seen multi-user dungeons built where NPCs and monsters are built using a general item constructor, but if I bother to implement this I'd make it a separate class in order to avoid having to toggle every time whether an item/npc is takable, talkable, etc. If possible, I'd make this class inherit from Player so that it can also have an inventory and related functions.
	Action: This will contain miscelaneous actions, such as "look" and if I have time to program it, "talk" and "hit" commands that can be used with NPCs. It will also contain a "help" method that will print a simple help text file listing possible commands. This probably won't contain any constructors and only contain specific commands--Items and NPCs constructed will store specific behaviors in response to these commands. I am also considering putting a turn method here, because I think it might be helpful when programming an NPC that exhibits the same behaviors as the player.

* How might you represent the relationship of rooms to other rooms?
	I am not going to bother to construct a grid of any sort or spacially represent the relationship between rooms. Instead, information about which rooms exit to which other rooms will be contained within each room object constructed under the Room class. As far as I know this is how most multi-user dungeons (MUDs) and old Zork games handled such relationships.

* Describe in words how you might implement the "take" command.
	All players start with an empty list that can then store items created with the constructor method within the Item class. This would make printing the inventory on command very easy.  All rooms will have a similar list that stores objects and prints their long descriptions when you look at a room. When you take an item it will be removed from the room list and put into the player's inventory list. I am wary about coding accessing individual items in this list once they've been stored (for example how you'd "use lantern" when it's stored in your inventory), but I think it's something that I can figure out with this structure.

Before you go on, email your answers to Naomi and Enne.  We'll comment on what
you've said as fast as we can.  This is mostly a check to make sure you're on a
decent track -- we know this assignment is a lot more open-ended than the
previous one.

STEP 2:

Build enough of your system (maybe a couple classes and a loop to interperet
text) so that you can construct (in your code) three or four rooms, and wander
between them.

STEP 3:

Build enough of your system so that you can pick up items and put them down.
Populate your rooms with some items!

OPTIONAL PARTS:

* Make some other entity that moves around, takes things, and puts things down
  in some random way, every time you do.

* Allow certain items to be "used" or "used on" other items. Example:

> use paint on bottle.
The bottle is now blue.

* Whatever else your creative mind imagines.
